#!/usr/bin/env perl
## no critic (ProhibitInteractiveTest)
use warnings;
use strict;

STDOUT->autoflush(1);
STDERR->autoflush(1);

use Getopt::Long;

use FindBin;
use lib "${FindBin::Bin}/../lib";
use My::GetFileInfo qw(get_file_info);
use My::Dedupe qw();

use constant ASCENDING => 1;
use constant DESCENDING => -1;

our $force    = 0;
our $verbose  = 0;
our $dry_run  = 0;
our $order    = DESCENDING;
our $minimum;
our $maximum;

Getopt::Long::Configure(qw(gnu_getopt no_ignore_case));
Getopt::Long::GetOptions(
    'min|minimum=i' => \$minimum,
    'max|maximum=i' => \$maximum,
    'f|force'    => sub { $dry_run = 0; $force = 1; },
    'n|dry-run'  => sub { $dry_run = 1; $force = 0; },
    'v|verbose+' => \$verbose,
    'asc|ascending'   => sub { $order = ASCENDING; },
    'desc|descending' => sub { $order = DESCENDING; },
) or die(":-(\n");
if (!$force && !$dry_run) {
    die("either -f/--force or -n/--dry-run must be specified\n");
}

my $progress = My::Progress->new(tick => 1);
my $dedupe = My::Dedupe->new();
$dedupe->{dry_run} = $dry_run;
$dedupe->{force} = $force;
$dedupe->{order} = $order;
$dedupe->{verbose} = $verbose;
$dedupe->{progress} = $progress;
$dedupe->{minimum} = $minimum;
$dedupe->{maximum} = $maximum;

my $sub = sub {
    my ($dev, $ino, $size, $mtime, $pathname) = @_;
    return if $size < $minimum || $size > $maximum;
    $dedupe->add_file($pathname, $dev, $ino, $size, $mtime);
};

# Read from stdin and/or files and/or traverse directories.
get_file_info({ sub => $sub }, @ARGV);

$dedupe->run();
