#!/usr/bin/env perl
## no critic (ProhibitInteractiveTest)
use warnings;
use strict;

use Getopt::Long;

use FindBin;
use lib "${FindBin::Bin}/../lib";
use My::DupeGroup qw(group_dupes);
use My::ShellQuote qw(shell_quote);
use My::GetFileInfo qw(get_file_info);

our $force    = 0;
our $verbose  = 0;
our $progress = 0;
our $sort     = 0;
our $dry_run  = 0;
Getopt::Long::Configure(qw(gnu_getopt no_ignore_case));
Getopt::Long::GetOptions(
    'f|force'    => sub { $dry_run = 0; $force = 1; },
    'v|verbose+' => \$verbose,
    'p|progress' => \$progress,
    's|sort'     => \$sort,
    'n|dry-run'  => sub { $dry_run = 1; $force = 0; },
) or die(":-(\n");
if (!$force && !$dry_run) {
    die("either -f/--force or -n/--dry-run must be specified\n");
}

$progress &&= -t 2;

my %by_size_dev_ino;
my $sub = sub {
    my ($dev, $ino, $size, $mtime, $pathname) = @_;
    my $dev_ino = "$dev,$ino";
    push(@{$by_size_dev_ino{$size}{$dev_ino}}, $pathname);
};
get_file_info({ sub => $sub }, @ARGV);

my @size = sort { $b <=> $a } keys %by_size_dev_ino; # descending order
# my @size = sort { $b <=> $a } keys %by_size_dev_ino; # ascending order

foreach my $size (@size) {
    my $by_dev_ino = $by_size_dev_ino{$size};
    # $by_dev_ino->{$dev_ino} = [$pathname, ...]
    next if scalar keys %$by_dev_ino < 2; # one dev/ino means no dupes
    my @dev_ino = sort keys %$by_dev_ino;
    my %dev_ino;
    foreach my $dev_ino (@dev_ino) {
        foreach my $filename (@{$by_dev_ino->{$dev_ino}}) {
            $dev_ino{$filename} = $dev_ino;
        }
    }
    my @files = map { $by_dev_ino->{$_}->[0] } @dev_ino;
    my @groups = group_dupes(@files);
    foreach my $group (sort { $a->[0] cmp $b->[0] } @groups) {
        my ($first, @other) = sort @$group;
        if ($force) {
            foreach my $other (@other) {
                my $dev_ino = $dev_ino{$other};
                my @unlink = sort @{$by_dev_ino->{$dev_ino}};
                foreach my $unlink (@unlink) {
                    if (!unlink($unlink)) {
                        warn("$unlink: $!\n");
                    } else {
                        warn("rm $unlink\n") if $verbose;
                    }
                }
            }
        } else {
            my $first_dev_ino = $dev_ino{$first};
            foreach my $keep (sort @{$by_dev_ino->{$first_dev_ino}}) {
                printf("# keep %s # %s\n", shell_quote($keep), $first_dev_ino);
            }
            foreach my $other (@other) {
                my $dev_ino = $dev_ino{$other};
                my @unlink = sort @{$by_dev_ino->{$dev_ino}};
                printf("rm     %s # %s\n", shell_quote($_), $dev_ino) foreach @unlink;
            }
        }
    }
}
